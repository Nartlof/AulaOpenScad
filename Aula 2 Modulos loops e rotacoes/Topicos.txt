1- Modulos
    -Modulos são blocos de código que podem ser reaproveitados
    -Servem para criar novas formas, novas transformações ou novos operadores
    -São delimitados pela declaração module:
        module exemplo(parametro1=valor1, parametro2=valor2....){
            codigo aqui
        }
    -São usados como qualquer outro comando do OpenScad
        exemplo(parametro1=3, parametro2=5);
        exemplo(3,5);
    
Exercício 1:
Transformar a caixa desenvolvida na última aula em um módulo que aceite
os parâmetros Altura (A), Largura (L), Comprimento (C) e Espessura (E) e 
crie a caixa.

2- Loops (for)
    -O comando for(){} cria loops nos quais uma sequencia de formas ou 
        operações podem ser repetidas.
    -Opera percorrendo os elementos de uma lista, similar ao Python:
        for (i=[1,2,3,4,5]){
            echo(i);
        }
    -Para elementos gerados em sequencia, pode-se adotar a seguinte sintaxe:
        for (i=[1:5]){
            echo(i);
        }
    -Ou, caso se precise de um incremento:
        for (i=[1:0.5:3]){
            echo(i);
        }
    -Os elementos da lista podem ser de qualquer tipo:
        for (i=[1,"tomate",1.9,[3,4]]){
            echo(i);
        }
    -Caso os elementos sejam numéricos, a seguinte sintaxe é válida:
        for (i = [0:3]){
            translate(i * [20,0,0])
                cube([10,10,10]);
        }
    -O comando for(){} pode ser concatenado:
        for (i = [0, 20]){
            for (j = [0, 20]){
                translate([i, j, 0])
                    cube([10, 10, 10]);
            }
        }

Exercicio 2:
Use o comando for(){} para reduzir a quantidade de declarações 'cube' no módulo
criado no Exercicio 1.


3- Rotações
    -Uma forma geométrica pode ser rotacionada em qualquer um dos eixos coordenados
        com a transformação rotate()
    -Os valores das rotações é dado em graus.
    -As rotações são aplicadas na forma seguinto a regra da mão direita.
        rotate([0,0,45])
            cube(20);
    -Quando mais de uma rotação é especificada na mesma transformação, a rotação em
    torno de X é excutada primeiro, depois Y e por final Z.
        rotate([45,0,45])
            cube(20);

        é o mesmo que:
        rotate([0,0,45])
        rotate([45,0,0])
            cube(20);

    -Para rotacionar um conjunto de formas, utiliza-se a operação union(){}
        rotate([0,0,45]) {
            cube([20,20,10]);
            cube([10,10,20]);
        }
    *ATENÇÃO*
    -A sequencia em que as rotações são aplicadas é importante.
        rotate([45,0,0])
        rotate([0,0,45]) {
            cube([20,20,10]);
            cube([10,10,20]);
        }

        rotate([0,0,45])
        rotate([45,0,0]) {
            cube([20,20,10]);
            cube([10,10,20]);
        }

Exercicio 3:
Usando os comandos aprendidos até agora, crie uma forma geométrica
composta de 6 caixas 20x20x20x2 dispostas ao redor de um circulo de
de raio 30 de modo que uma diagonal esteja alinhada com o centro
do círculo.